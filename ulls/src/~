#inlcude <iostream>

#include <rapidjson/document.h>
#include <rapidjson/writer.h>
#include <rapidjson/stringbuffer.h>

#define RAPIDJSON_PARSE_ERROR_NORETURN(parseErrorCode, offset) \
	throw ParseException(parseErrorCode, #parseErrorCode, offset)

#include <stdexcept>               // std::runtime_error
#include <rapidjson/error/error.h> // rapidjson::ParseResult

Manager::Mananger()
{
	int err;
	err = FCGX_Init();

	if(err)
		LOG(INFO) << "FCGX_Init Failed"<< endl;
	
	err = FCGX_InitRequest(&request, 0, 0);

	if(err)
		LOG(ERROR) <<"FCGX_InitRequest Failed" << endl;

}

void Manager::handleRequest() {
	int err;

	streambuf* cin_streambuf = cin.rdbuf();
	streambuf* cout_streambuf = cout.rdbuf();
	streambuf* cerr_streambuf = cerr.rdbuf();

	if (err) {
		LOG(ERROR) << "FCGX_Accept_r stopped" << err << endl;
	}

	fcgi_streambuf cin_fcgi_streambuf(request.in);
	fcgi_streambuf cout_fcgi_streambuf(request.out);
	fcgi_streambuf cerr_fcgi_streambuf(request.err);

	cin.rdbuf(&cin_fcgi_streambuf);
	cout.rdbuf(&cout_fcgi_streambuf);
	cerr.rdbuf(&cerr_fcgi_streambuf);

	if( !strcmp(uri, "/api/start" )) 
		prsp = handleStartUrl(request);
	else if (!strcmp(uri, "/api/stop" ) ) 
		prsp = handleStopUrl(request);
	else 
		continue;

	string result = prsp->build(); // .................
	LOG(INFO) << "result" << result << endl;

	FCGX_PutStr(result.c_str(), strlen(result.c_str()), request.out);	
}


bool Manager::parseRequest(const FCGX_Request& request, Resource& res) {

}

std::string Manager::formResponse(const char* uri, Resource& r) {

}

Response* Manager::handleStartUrl(const FCGX_Request& request) {

}



