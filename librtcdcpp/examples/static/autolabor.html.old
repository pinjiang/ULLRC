<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Tele-Operating Drive</title>
    <!--<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css">-->
    <script defer src="https://use.fontawesome.com/releases/v5.1.0/js/all.js"></script>
    <script src="http://code.jquery.com/jquery-1.11.1.min.js"></script>
    <script src="static/jquery-json-master/dist/jquery.json.min.js"></script>
    <script src="static/jquery-json-master/src/jquery.json.js"></script>
    <!--<script src="https://github.com/Krinkle/jquery-json/tree/master/dist/jquery.json.min.js"></script>-->
    <!--<script src="https://github.com/Krinkle/jquery-json/tree/master/src/jquery.json.js"></script>-->
    <!--<script type="text/javascript" src="./roslibjs/roslib.js"></script>-->
    <!--<link rel="stylesheet" href="./bulma-0.7.1/css/bulma.min.css">-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css">
    <script type="text/javascript" src="https://static.robotwebtools.org/roslibjs/current/roslib.js"></script>
    <style>
    #logi {
        width: 600px;
        margin-left: auto;
        margin-right: auto;
    }

    .tag {
        margin-bottom: 4px;
        width: 200px;
        margin-left: 200px;
        margin-right: 200px;
    }

    #message,
    #control-switch,
    #monitoring {
        width: 240px;
        margin-top: 1.5rem;
        margin-left: 180px;
        margin-right: 180px;
    }

    #gear_d,
    #gear_n,
    #gear_r {
        width: 240px;
        height: 60px;
        margin-left: 180px;
        margin-right: 180px;
        margin-bottom: 0px;
    }
    </style>
</head>

<body>
    <nav class="navbar" role="navigation" aria-label="main navigation">
        <div class="navbar-brand">
            <a class="navbar-item" href="https://bulma.io">
                <!--<img src="https://bulma.io/images/bulma-logo.png" alt="Bulma: a modern CSS framework based on Flexbox" width="112" height="28">-->
            </a>
            <a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false">
                <span aria-hidden="true"></span>
                <span aria-hidden="true"></span>
                <span aria-hidden="true"></span>
            </a>
        </div>
    </nav>
    <div id="logi">
        <span class="tag is-medium is-rounded">油门 Accelerator</span>
        <progress id="accelerator" class="progress is-large is-primary" value="0" min="0" max="100"></progress>
        <span class="tag is-medium is-rounded">方向盘 Steering Wheel</span>
        <progress id="steering-wheel" class="progress is-large is-primary" value="50" min="0" max="100"></progress>
        <span class="tag is-medium is-rounded">刹车 Brake</span>
        <progress id="brake" class="progress is-large is-primary" value="0" min="0" max="100"></progress>
        <span class="tag is-medium is-rounded">档位 Gear</span>
        <div>
            <span id="gear_r" class="tag is-light is-medium">倒挡 Reverse Gear(R)</span>
        </div>
        <div>
            <span id="gear_n" class="tag is-light is-medium is-primary">空档 Neutral Gear(N)</span>
        </div>
        <div>
            <span id="gear_d" class="tag is-light is-medium">前进挡 Forward Gear(D)</span>
        </div>
        <div>
            <a id="control-switch" class="button">远程控制 Remote Control</a>
        </div>
        <div>
            <a id="monitoring" class="button" onclick="monitor()">视频监控 Monitoring</a>
        </div>
        <p id="message" style="text-align: center;"></p>
    </div>
</body>
<script type="text/javascript">
var haveEvents = 'GamepadEvent' in window;
var haveWebkitEvents = 'WebKitGamepadEvent' in window;
var controllers = [];
var rAF = window.mozRequestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.requestAnimationFrame;

var index = 0;
var publishInterval = 500;
var maxLinearSpeed = 0.833;
var maxAngularSpeed = 0.4;
var cmdVel;
var publishClock;
var ros;
var localhost_url = "http://localhost:4000";

function getSteeringWheel() {
    return controllers[index].axes[0];
}

function getAccelerator() {
    return controllers[index].axes[2];
}

function getBrake() {
    return controllers[index].axes[5];
}

function getGear() {
    var buttons = controllers[index].buttons;
    if (isButtonPressed(buttons[12])) {
        return 12;
    } else if (isButtonPressed(buttons[13])) {
        return 13;
    } else if (isButtonPressed(buttons[14])) {
        return 14;
    } else if (isButtonPressed(buttons[15])) {
        return 15;
    } else if (isButtonPressed(buttons[16])) {
        return 16;
    } else if (isButtonPressed(buttons[17])) {
        return 17;
    } else {
        return 18;
    }
}

function isButtonPressed(btn) {
    return (typeof(btn) == "object") ? btn.pressed : (btn == 1.0);
}

function calcLinearSpeed(accelerator) {
    var gear = getGear();
    var brake = getBrake();
    console.log("gear: " + gear + "; brake:" + brake);
    if (brake < 1.0 || gear == 18) {
        return 0;
    } else {
        var speed = maxLinearSpeed * (1 - accelerator) / 2.0;
        if (gear == 14) {
            speed = -speed;
        }
        return speed;
    }
}

function calcAngularSpeed(steeringWheel) {
    return -maxAngularSpeed * steeringWheel;
}

function monitor() {
    console.log("trigger monitoring.....");
    var request = { 
        _event: "trigger",
        _data: "callForMonitoring"
    };
    var jsobj = {Monitoring:request};
    var encoded = $.toJSON(jsobj);
    var jsonStr = encoded; 
    $.post(localhost_url,jsonStr);
}

/*function start() {
    // Connecting to ROS
    // -----------------
    ros = new ROSLIB.Ros();

    // If there is an error on the backend, an 'error' emit will be emitted.
    ros.on('error', function (error) {
        console.log(error);
        document.getElementById('message').innerHTML = error;
    });

    // Find out exactly when we made a connection.
    ros.on('connection', function () {
        console.log('Connection made!');
        document.getElementById('message').innerHTML = 'Connection made';
        // Publishing a Topic
        // ------------------

        // First, we create a Topic object with details of the topic's name and message type.
        cmdVel = new ROSLIB.Topic({
            ros: ros,
            name: '/cmd_vel',
            messageType: 'geometry_msgs/Twist'
        });

        publishClock = setInterval(function () {
            // Then we create the payload to be published. The object we pass in to ros.Message matches the
            // fields defined in the geometry_msgs/Twist.msg definition.
            var linear_x = calcLinearSpeed(getAccelerator());
            var angular_z = calcAngularSpeed(getSteeringWheel());
            var twist = new ROSLIB.Message({
                linear: {
                    x: linear_x,
                    y: 0,
                    z: 0
                },
                angular: {
                    x: 0,
                    y: 0,
                    z: angular_z
                }
            });
            // And finally, publish.
            cmdVel.publish(twist);
        }, publishInterval);
    });

    ros.on('close', function () {
        console.log('Connection closed.');
        document.getElementById('message').innerHTML = 'Connection closed';
    });

    // Create a connection to the rosbridge WebSocket server.
    ros.connect('ws://192.168.1.101:9090');
}*/

function stop() {
    clearInterval(publishClock);
}

function connecthandler(e) {
    addgamepad(e.gamepad);
}

function addgamepad(gamepad) {
    controllers[gamepad.index] = gamepad;
    rAF(updateStatus);
}

function disconnecthandler(e) {
    removegamepad(e.gamepad);
}

function removegamepad(gamepad) {
    delete controllers[gamepad.index];
}

function updateStatus() {
    scangamepads();
    var steeringWheel = getSteeringWheel();
    var accelerator = getAccelerator();
    var brake = getBrake();
    var gear = getGear();
    document.getElementById('steering-wheel').value = Math.ceil(steeringWheel * 50 + 50).toString();
    document.getElementById('accelerator').value = Math.ceil(-accelerator * 50 + 50).toString();
    document.getElementById('brake').value = Math.ceil(-brake * 50 + 50).toString();
    if (gear == 12 || gear == 13 || gear == 15 || gear == 16 || gear == 17) {
        document.getElementById('gear_d').className = "tag is-light is-medium is-primary";
        document.getElementById('gear_n').className = "tag is-light is-medium";
        document.getElementById('gear_r').className = "tag is-light is-medium";
    } else if (gear == 14) {
        document.getElementById('gear_d').className = "tag is-light is-medium";
        document.getElementById('gear_n').className = "tag is-light is-medium";
        document.getElementById('gear_r').className = "tag is-light is-medium is-primary";
    } else {
        document.getElementById('gear_d').className = "tag is-light is-medium";
        document.getElementById('gear_n').className = "tag is-light is-medium is-primary";
        document.getElementById('gear_r').className = "tag is-light is-medium";
    }
    rAF(updateStatus);
}

function scangamepads() {
    var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);
    for (var i = 0; i < gamepads.length; i++) {
        if (gamepads[i]) {
            if (!(gamepads[i].index in controllers)) {
                addgamepad(gamepads[i]);
            } else {
                controllers[gamepads[i].index] = gamepads[i];
            }
        }
    }
}

if (haveEvents) {
    window.addEventListener("gamepadconnected", connecthandler);
    window.addEventListener("gamepaddisconnected", disconnecthandler);
} else if (haveWebkitEvents) {
    window.addEventListener("webkitgamepadconnected", connecthandler);
    window.addEventListener("webkitgamepaddisconnected", disconnecthandler);
} else {
    setInterval(scangamepads, 500);
}

/* webRTC */
// Global vars
var dataChannelLabel = "testchannel";
var reliableSocket = null;
var peerConnection = null;
var dataChannel = null;
var remoteCandidates = [];
var have_answer = false;
/**
 * Add the various callback handlers to the PeerConnection.
 * Shared between both clients.
 */
var setupPeerConnection = function() {
    peerConnection = new RTCPeerConnection({
        iceServers: [{urls: "stun:stun.services.mozilla.com"},
            {urls: [
                "stun:stun.l.google.com:19302",
                "stun:stun1.l.google.com:19302",
                "stun:stun2.l.google.com:19302",
                "stun:stun3.l.google.com:19302",
                "stun:stun4.l.google.com:19302"
            ]
        }]
    });

    peerConnection.onicecandidate = function(event) {
        if (event.candidate) {
            reliableSocket.sendMessage("candidate", event.candidate);
        } else {
            console.log("All local candidates received");
        }
    };

    peerConnection.ondatachannel = function(event) {
        if (event.channel.label == dataChannelLabel) {
            dataChannel = event.channel;
            console.log("DataChannel received");
            setupDataChannel(event.channel);
        } else {
            console.log("Unknown CataChannel label: " + event.channel.label);
        }
    }
};

/**
 * Add the various callback handlers to the DataChannel.
 * Shared between both clients.
 */
var setupDataChannel = function(dataChannel) {
    dataChannel.onopen = function(e) {
        console.log("DataChannel open and ready to be used");
    };

    dataChannel.onclose = function() {
        console.log("DataChannel closed");
    };

    dataChannel.onerror = function(e) {
        console.log("DataChannel error: " + e.message);
        console.log(e);
    };

    dataChannel.onmessage = function(e) {
        console.log("Received message: " + e.data);
        if (sourceBuffer != null) {
            sourceBuffer.appendBuffer(e.data);
        } else {
            console.log("Got data but sourceBuffer is null");
        }
    };
};

var createOffer = function() {
    console.log("create offer");
    setupPeerConnection();
    //dataChannel = peerConnection.createDataChannel("testchannel");
    //setupDataChannel(dataChannel);
    setupRosDataChannel();

    peerConnection.createOffer().then(function(offer) {
            return peerConnection.setLocalDescription(offer);
        })
        .then(function() {
            reliableSocket.sendMessage("offer", peerConnection.localDescription);
        })
        .catch(function(reason) {
            // An error occurred, so handle the failure to connect
            console.log("RTC Error", reason);
        });
};

var createAnswer = function(msg) {
    console.log("create answer");
    var desc = new RTCSessionDescription(msg);

    peerConnection.setRemoteDescription(desc)
        .then(function() {
            return peerConnection.createAnswer();
        })
        .then(function(answer) {
            return peerConnection.setLocalDescription(answer);
        })
        .then(function() {
            reliableSocket.sendMessage("answer", peerConnection.localDescription);
        })
        .catch(function(reason) {
            console.log("RTC Error", reason);
        });
};

var handleCandidate = function(msg) {
    var candidate = new RTCIceCandidate(msg);
    peerConnection.addIceCandidate(candidate).then(function() {
        console.log("New remote candidate received");
    }).catch(function(e) {
        console.log("Error: Failure during addIceCandidate()", e);
    });
};

var initiate = function() {
    var channel_name = "test";
    var wsAddress = "ws://" + window.location.host + "/channel/" + channel_name;
    console.log("Attempting WebSocket connection to " + wsAddress);

    reliableSocket = new WebSocket(wsAddress);

    reliableSocket.onopen = function(event) {
        //Socket is now ready to send and receive messages
        console.log("reliableSocket is open and ready to use");
        //reliableSocket.sendMessage("client_connected", {});
    };

    reliableSocket.onerror = function(event) {
        // Socket failed to connect
    };

    reliableSocket.onclose = function(event) {
        console.log("ERROR: Reliable socket has closed");
    };

    // Simple helper to send JSON messages with a given type
    reliableSocket.sendMessage = function(type, msg) {
        console.log("Sending msg of type: " + type);
        reliableSocket.send(JSON.stringify({ "type": type, "msg": msg }));
    }

    reliableSocket.sendString = function(str) {
        console.log("Sending string: " + str);
        reliableSocket.send(str);
    }

    reliableSocket.onmessage = function(event) {
        console.log("Got msg", event);
        if (event.data == "hello") {
            console.log("received server's ack");
            reliableSocket.sendString("Car_data hello 1234");
            return;
        }
        if (event.data == "Hello Car_data") {
            console.log("Hello from websocket server");
            //reliableSocket.sendString("Sessions");
            document.getElementById("control-switch").onclick = function() {
                reliableSocket.sendString("Session_data");
            }
            return;
        }
        if (event.data == "SESSION_OK") {
            console.log("SESSION_OK");
            createOffer();
            return;
        }
        if (event.data == "Sessions failed") {
            console.log("Sessions failed");
            showMessage("Sessions failed");
            return;
        }
        var msg = JSON.parse(event.data);

        switch (msg.type) {
            case "client_connected":
                //console.log("Client connected: starting RTC handshake");
                //createOffer();
                console.log("car connected");
                break;
            case "client_disconnected":
                console.log("Remote client disconnected");
                stop();
                break;
            case "offer":
                createAnswer(msg.msg);
                break;
            case "answer":
                peerConnection.setRemoteDescription(new RTCSessionDescription(msg.msg))
                    .then(function() {
                        have_answer = true;
                        var i = 0;
                        for (i = 0; i < remoteCandidates.length; i++) {
                            handleCandidate(remoteCandidates[i]);
                        }
                    }).catch(function(reason) {
                        console.log("error: " + reason);
                    });
                break;
            case "candidate":
                if (msg.msg.candidate) {
                    if (!have_answer) {
                        remoteCandidates.push(msg.msg);
                    } else {
                        handleCandidate(msg.msg);
                    }
                } else {
                    console.log("Remote peer has no more candidates");
                }
                break;
            default:
                console.log("WARNING: Ignoring unknown msg of type '" + msg.type + "'");
                break;
        }
    };
}

var showMessage = function(msg) {
    document.getElementById('message').innerHTML = msg;
}

function setupRosDataChannel() {
    // Connecting to ROS
    // -----------------
    var ros = new ROSLIB.Ros({
        transportLibrary: peerConnection,
    });
    // If there is an error on the backend, an 'error' emit will be emitted.
    ros.on('error', function(error) {
        console.log(error);
    });
    // Find out exactly when we made a connection.
    ros.on('connection', function() {
        console.log('Connection made!');
        showMessage('Connection made!');
        // Publishing a Topic
        // ------------------

        // First, we create a Topic object with details of the topic's name and message type.
        cmdVel = new ROSLIB.Topic({
            ros: ros,
            name: '/cmd_vel',
            messageType: 'geometry_msgs/Twist'
        });

        publishClock = setInterval(function() {
            // Then we create the payload to be published. The object we pass in to ros.Message matches the
            // fields defined in the geometry_msgs/Twist.msg definition.
            //var linear_x = calcLinearSpeed(getAccelerator());
            //var angular_z = calcAngularSpeed(getSteeringWheel());
            var linear_x = 1.0;
            var angular_z = 2.0;
            var twist = new ROSLIB.Message({
                linear: {
                    x: linear_x,
                    y: 0,
                    z: 0
                },
                angular: {
                    x: 0,
                    y: 0,
                    z: angular_z
                }
            });
            // And finally, publish.
            cmdVel.publish(twist);
            console.log("send ros message: " + twist);
        }, publishInterval);
    });
    ros.on('close', function() {
        console.log('Connection closed.');
    });
    // Create a connection to the rosbridge WebSocket server.
    ros.connect('ros_datachannel');
}

window.onload = function() {
    initiate();
};
</script>

</html>
